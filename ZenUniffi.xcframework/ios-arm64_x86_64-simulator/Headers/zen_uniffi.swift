// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(zen_uniffiFFI)
import zen_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_zen_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_zen_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureZenUniffiInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol ZenDecisionProtocol: AnyObject, Sendable {
    
    func evaluate(context: JsonBuffer, options: ZenEvaluateOptions?) async throws  -> ZenEngineResponse
    
    func validate() throws 
    
}
open class ZenDecision: ZenDecisionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_zen_uniffi_fn_clone_zendecision(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_zen_uniffi_fn_free_zendecision(pointer, $0) }
    }

    

    
open func evaluate(context: JsonBuffer, options: ZenEvaluateOptions?)async throws  -> ZenEngineResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_zen_uniffi_fn_method_zendecision_evaluate(
                    self.uniffiClonePointer(),
                    FfiConverterTypeJsonBuffer_lower(context),FfiConverterOptionTypeZenEvaluateOptions.lower(options)
                )
            },
            pollFunc: ffi_zen_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_zen_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_zen_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeZenEngineResponse_lift,
            errorHandler: FfiConverterTypeZenError_lift
        )
}
    
open func validate()throws   {try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_method_zendecision_validate(self.uniffiClonePointer(),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenDecision: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ZenDecision

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenDecision {
        return ZenDecision(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ZenDecision) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenDecision {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ZenDecision, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenDecision_lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenDecision {
    return try FfiConverterTypeZenDecision.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenDecision_lower(_ value: ZenDecision) -> UnsafeMutableRawPointer {
    return FfiConverterTypeZenDecision.lower(value)
}






public protocol ZenEngineProtocol: AnyObject, Sendable {
    
    func createDecision(content: JsonBuffer) throws  -> ZenDecision
    
    func evaluate(key: String, context: JsonBuffer, options: ZenEvaluateOptions?) async throws  -> ZenEngineResponse
    
    func getDecision(key: String) async throws  -> ZenDecision
    
}
open class ZenEngine: ZenEngineProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_zen_uniffi_fn_clone_zenengine(self.pointer, $0) }
    }
public convenience init(loader: ZenDecisionLoaderCallback?, customNode: ZenCustomNodeCallback?) {
    let pointer =
        try! rustCall() {
    uniffi_zen_uniffi_fn_constructor_zenengine_new(
        FfiConverterOptionCallbackInterfaceZenDecisionLoaderCallback.lower(loader),
        FfiConverterOptionCallbackInterfaceZenCustomNodeCallback.lower(customNode),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_zen_uniffi_fn_free_zenengine(pointer, $0) }
    }

    

    
open func createDecision(content: JsonBuffer)throws  -> ZenDecision  {
    return try  FfiConverterTypeZenDecision_lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_method_zenengine_create_decision(self.uniffiClonePointer(),
        FfiConverterTypeJsonBuffer_lower(content),$0
    )
})
}
    
open func evaluate(key: String, context: JsonBuffer, options: ZenEvaluateOptions?)async throws  -> ZenEngineResponse  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_zen_uniffi_fn_method_zenengine_evaluate(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(key),FfiConverterTypeJsonBuffer_lower(context),FfiConverterOptionTypeZenEvaluateOptions.lower(options)
                )
            },
            pollFunc: ffi_zen_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_zen_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_zen_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeZenEngineResponse_lift,
            errorHandler: FfiConverterTypeZenError_lift
        )
}
    
open func getDecision(key: String)async throws  -> ZenDecision  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_zen_uniffi_fn_method_zenengine_get_decision(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(key)
                )
            },
            pollFunc: ffi_zen_uniffi_rust_future_poll_pointer,
            completeFunc: ffi_zen_uniffi_rust_future_complete_pointer,
            freeFunc: ffi_zen_uniffi_rust_future_free_pointer,
            liftFunc: FfiConverterTypeZenDecision_lift,
            errorHandler: FfiConverterTypeZenError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEngine: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ZenEngine

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenEngine {
        return ZenEngine(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ZenEngine) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEngine {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ZenEngine, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngine_lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenEngine {
    return try FfiConverterTypeZenEngine.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngine_lower(_ value: ZenEngine) -> UnsafeMutableRawPointer {
    return FfiConverterTypeZenEngine.lower(value)
}






public protocol ZenExpressionProtocol: AnyObject, Sendable {
    
    func evaluate(context: JsonBuffer?) throws  -> JsonBuffer
    
}
open class ZenExpression: ZenExpressionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_zen_uniffi_fn_clone_zenexpression(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_zen_uniffi_fn_free_zenexpression(pointer, $0) }
    }

    
public static func compile(expression: String)throws  -> ZenExpression  {
    return try  FfiConverterTypeZenExpression_lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_constructor_zenexpression_compile(
        FfiConverterString.lower(expression),$0
    )
})
}
    

    
open func evaluate(context: JsonBuffer?)throws  -> JsonBuffer  {
    return try  FfiConverterTypeJsonBuffer_lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_method_zenexpression_evaluate(self.uniffiClonePointer(),
        FfiConverterOptionTypeJsonBuffer.lower(context),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenExpression: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ZenExpression

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenExpression {
        return ZenExpression(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ZenExpression) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenExpression {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ZenExpression, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenExpression_lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenExpression {
    return try FfiConverterTypeZenExpression.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenExpression_lower(_ value: ZenExpression) -> UnsafeMutableRawPointer {
    return FfiConverterTypeZenExpression.lower(value)
}






public protocol ZenExpressionUnaryProtocol: AnyObject, Sendable {
    
    func evaluate(context: JsonBuffer) throws  -> Bool
    
}
open class ZenExpressionUnary: ZenExpressionUnaryProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_zen_uniffi_fn_clone_zenexpressionunary(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_zen_uniffi_fn_free_zenexpressionunary(pointer, $0) }
    }

    
public static func compile(expression: String)throws  -> ZenExpressionUnary  {
    return try  FfiConverterTypeZenExpressionUnary_lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_constructor_zenexpressionunary_compile(
        FfiConverterString.lower(expression),$0
    )
})
}
    

    
open func evaluate(context: JsonBuffer)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_method_zenexpressionunary_evaluate(self.uniffiClonePointer(),
        FfiConverterTypeJsonBuffer_lower(context),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenExpressionUnary: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ZenExpressionUnary

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenExpressionUnary {
        return ZenExpressionUnary(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ZenExpressionUnary) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenExpressionUnary {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ZenExpressionUnary, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenExpressionUnary_lift(_ pointer: UnsafeMutableRawPointer) throws -> ZenExpressionUnary {
    return try FfiConverterTypeZenExpressionUnary.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenExpressionUnary_lower(_ value: ZenExpressionUnary) -> UnsafeMutableRawPointer {
    return FfiConverterTypeZenExpressionUnary.lower(value)
}




public struct DecisionNode {
    public var id: String
    public var name: String
    public var kind: String
    public var config: JsonBuffer

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, kind: String, config: JsonBuffer) {
        self.id = id
        self.name = name
        self.kind = kind
        self.config = config
    }
}

#if compiler(>=6)
extension DecisionNode: Sendable {}
#endif


extension DecisionNode: Equatable, Hashable {
    public static func ==(lhs: DecisionNode, rhs: DecisionNode) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.config != rhs.config {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(kind)
        hasher.combine(config)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDecisionNode: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DecisionNode {
        return
            try DecisionNode(
                id: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                kind: FfiConverterString.read(from: &buf), 
                config: FfiConverterTypeJsonBuffer.read(from: &buf)
        )
    }

    public static func write(_ value: DecisionNode, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterString.write(value.kind, into: &buf)
        FfiConverterTypeJsonBuffer.write(value.config, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDecisionNode_lift(_ buf: RustBuffer) throws -> DecisionNode {
    return try FfiConverterTypeDecisionNode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDecisionNode_lower(_ value: DecisionNode) -> RustBuffer {
    return FfiConverterTypeDecisionNode.lower(value)
}


public struct ZenConfig {
    public var nodesInContext: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(nodesInContext: Bool?) {
        self.nodesInContext = nodesInContext
    }
}

#if compiler(>=6)
extension ZenConfig: Sendable {}
#endif


extension ZenConfig: Equatable, Hashable {
    public static func ==(lhs: ZenConfig, rhs: ZenConfig) -> Bool {
        if lhs.nodesInContext != rhs.nodesInContext {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(nodesInContext)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenConfig {
        return
            try ZenConfig(
                nodesInContext: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: ZenConfig, into buf: inout [UInt8]) {
        FfiConverterOptionBool.write(value.nodesInContext, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenConfig_lift(_ buf: RustBuffer) throws -> ZenConfig {
    return try FfiConverterTypeZenConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenConfig_lower(_ value: ZenConfig) -> RustBuffer {
    return FfiConverterTypeZenConfig.lower(value)
}


public struct ZenEngineHandlerRequest {
    public var input: JsonBuffer
    public var node: DecisionNode

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(input: JsonBuffer, node: DecisionNode) {
        self.input = input
        self.node = node
    }
}

#if compiler(>=6)
extension ZenEngineHandlerRequest: Sendable {}
#endif


extension ZenEngineHandlerRequest: Equatable, Hashable {
    public static func ==(lhs: ZenEngineHandlerRequest, rhs: ZenEngineHandlerRequest) -> Bool {
        if lhs.input != rhs.input {
            return false
        }
        if lhs.node != rhs.node {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(input)
        hasher.combine(node)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEngineHandlerRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEngineHandlerRequest {
        return
            try ZenEngineHandlerRequest(
                input: FfiConverterTypeJsonBuffer.read(from: &buf), 
                node: FfiConverterTypeDecisionNode.read(from: &buf)
        )
    }

    public static func write(_ value: ZenEngineHandlerRequest, into buf: inout [UInt8]) {
        FfiConverterTypeJsonBuffer.write(value.input, into: &buf)
        FfiConverterTypeDecisionNode.write(value.node, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineHandlerRequest_lift(_ buf: RustBuffer) throws -> ZenEngineHandlerRequest {
    return try FfiConverterTypeZenEngineHandlerRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineHandlerRequest_lower(_ value: ZenEngineHandlerRequest) -> RustBuffer {
    return FfiConverterTypeZenEngineHandlerRequest.lower(value)
}


public struct ZenEngineHandlerResponse {
    public var output: JsonBuffer
    public var traceData: JsonBuffer?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(output: JsonBuffer, traceData: JsonBuffer?) {
        self.output = output
        self.traceData = traceData
    }
}

#if compiler(>=6)
extension ZenEngineHandlerResponse: Sendable {}
#endif


extension ZenEngineHandlerResponse: Equatable, Hashable {
    public static func ==(lhs: ZenEngineHandlerResponse, rhs: ZenEngineHandlerResponse) -> Bool {
        if lhs.output != rhs.output {
            return false
        }
        if lhs.traceData != rhs.traceData {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(output)
        hasher.combine(traceData)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEngineHandlerResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEngineHandlerResponse {
        return
            try ZenEngineHandlerResponse(
                output: FfiConverterTypeJsonBuffer.read(from: &buf), 
                traceData: FfiConverterOptionTypeJsonBuffer.read(from: &buf)
        )
    }

    public static func write(_ value: ZenEngineHandlerResponse, into buf: inout [UInt8]) {
        FfiConverterTypeJsonBuffer.write(value.output, into: &buf)
        FfiConverterOptionTypeJsonBuffer.write(value.traceData, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineHandlerResponse_lift(_ buf: RustBuffer) throws -> ZenEngineHandlerResponse {
    return try FfiConverterTypeZenEngineHandlerResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineHandlerResponse_lower(_ value: ZenEngineHandlerResponse) -> RustBuffer {
    return FfiConverterTypeZenEngineHandlerResponse.lower(value)
}


public struct ZenEngineResponse {
    public var performance: String
    public var result: JsonBuffer
    public var trace: [String: ZenEngineTrace]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(performance: String, result: JsonBuffer, trace: [String: ZenEngineTrace]?) {
        self.performance = performance
        self.result = result
        self.trace = trace
    }
}

#if compiler(>=6)
extension ZenEngineResponse: Sendable {}
#endif


extension ZenEngineResponse: Equatable, Hashable {
    public static func ==(lhs: ZenEngineResponse, rhs: ZenEngineResponse) -> Bool {
        if lhs.performance != rhs.performance {
            return false
        }
        if lhs.result != rhs.result {
            return false
        }
        if lhs.trace != rhs.trace {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(performance)
        hasher.combine(result)
        hasher.combine(trace)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEngineResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEngineResponse {
        return
            try ZenEngineResponse(
                performance: FfiConverterString.read(from: &buf), 
                result: FfiConverterTypeJsonBuffer.read(from: &buf), 
                trace: FfiConverterOptionDictionaryStringTypeZenEngineTrace.read(from: &buf)
        )
    }

    public static func write(_ value: ZenEngineResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.performance, into: &buf)
        FfiConverterTypeJsonBuffer.write(value.result, into: &buf)
        FfiConverterOptionDictionaryStringTypeZenEngineTrace.write(value.trace, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineResponse_lift(_ buf: RustBuffer) throws -> ZenEngineResponse {
    return try FfiConverterTypeZenEngineResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineResponse_lower(_ value: ZenEngineResponse) -> RustBuffer {
    return FfiConverterTypeZenEngineResponse.lower(value)
}


public struct ZenEngineTrace {
    public var id: String
    public var name: String
    public var input: JsonBuffer
    public var output: JsonBuffer
    public var performance: String?
    public var traceData: JsonBuffer?
    public var order: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, input: JsonBuffer, output: JsonBuffer, performance: String?, traceData: JsonBuffer?, order: UInt32) {
        self.id = id
        self.name = name
        self.input = input
        self.output = output
        self.performance = performance
        self.traceData = traceData
        self.order = order
    }
}

#if compiler(>=6)
extension ZenEngineTrace: Sendable {}
#endif


extension ZenEngineTrace: Equatable, Hashable {
    public static func ==(lhs: ZenEngineTrace, rhs: ZenEngineTrace) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.input != rhs.input {
            return false
        }
        if lhs.output != rhs.output {
            return false
        }
        if lhs.performance != rhs.performance {
            return false
        }
        if lhs.traceData != rhs.traceData {
            return false
        }
        if lhs.order != rhs.order {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(input)
        hasher.combine(output)
        hasher.combine(performance)
        hasher.combine(traceData)
        hasher.combine(order)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEngineTrace: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEngineTrace {
        return
            try ZenEngineTrace(
                id: FfiConverterString.read(from: &buf), 
                name: FfiConverterString.read(from: &buf), 
                input: FfiConverterTypeJsonBuffer.read(from: &buf), 
                output: FfiConverterTypeJsonBuffer.read(from: &buf), 
                performance: FfiConverterOptionString.read(from: &buf), 
                traceData: FfiConverterOptionTypeJsonBuffer.read(from: &buf), 
                order: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ZenEngineTrace, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterTypeJsonBuffer.write(value.input, into: &buf)
        FfiConverterTypeJsonBuffer.write(value.output, into: &buf)
        FfiConverterOptionString.write(value.performance, into: &buf)
        FfiConverterOptionTypeJsonBuffer.write(value.traceData, into: &buf)
        FfiConverterUInt32.write(value.order, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineTrace_lift(_ buf: RustBuffer) throws -> ZenEngineTrace {
    return try FfiConverterTypeZenEngineTrace.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEngineTrace_lower(_ value: ZenEngineTrace) -> RustBuffer {
    return FfiConverterTypeZenEngineTrace.lower(value)
}


public struct ZenEvaluateOptions {
    public var maxDepth: UInt8?
    public var trace: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(maxDepth: UInt8?, trace: Bool?) {
        self.maxDepth = maxDepth
        self.trace = trace
    }
}

#if compiler(>=6)
extension ZenEvaluateOptions: Sendable {}
#endif


extension ZenEvaluateOptions: Equatable, Hashable {
    public static func ==(lhs: ZenEvaluateOptions, rhs: ZenEvaluateOptions) -> Bool {
        if lhs.maxDepth != rhs.maxDepth {
            return false
        }
        if lhs.trace != rhs.trace {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(maxDepth)
        hasher.combine(trace)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenEvaluateOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenEvaluateOptions {
        return
            try ZenEvaluateOptions(
                maxDepth: FfiConverterOptionUInt8.read(from: &buf), 
                trace: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: ZenEvaluateOptions, into buf: inout [UInt8]) {
        FfiConverterOptionUInt8.write(value.maxDepth, into: &buf)
        FfiConverterOptionBool.write(value.trace, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEvaluateOptions_lift(_ buf: RustBuffer) throws -> ZenEvaluateOptions {
    return try FfiConverterTypeZenEvaluateOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenEvaluateOptions_lower(_ value: ZenEvaluateOptions) -> RustBuffer {
    return FfiConverterTypeZenEvaluateOptions.lower(value)
}


public enum ZenError: Swift.Error {

    
    
    case Zero
    case InvalidArgument
    case StringNullError
    case StringUtf8Error
    case JsonSerializationFailed
    case JsonDeserializationFailed
    case ExecutionTaskSpawnError
    case IsolateError(String
    )
    case EvaluationError(String
    )
    case ValidationError(String
    )
    case LoaderKeyNotFound(key: String
    )
    case LoaderInternalError(key: String, details: String
    )
    case TemplateEngineError(template: String, details: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeZenError: FfiConverterRustBuffer {
    typealias SwiftType = ZenError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ZenError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Zero
        case 2: return .InvalidArgument
        case 3: return .StringNullError
        case 4: return .StringUtf8Error
        case 5: return .JsonSerializationFailed
        case 6: return .JsonDeserializationFailed
        case 7: return .ExecutionTaskSpawnError
        case 8: return .IsolateError(
            try FfiConverterString.read(from: &buf)
            )
        case 9: return .EvaluationError(
            try FfiConverterString.read(from: &buf)
            )
        case 10: return .ValidationError(
            try FfiConverterString.read(from: &buf)
            )
        case 11: return .LoaderKeyNotFound(
            key: try FfiConverterString.read(from: &buf)
            )
        case 12: return .LoaderInternalError(
            key: try FfiConverterString.read(from: &buf), 
            details: try FfiConverterString.read(from: &buf)
            )
        case 13: return .TemplateEngineError(
            template: try FfiConverterString.read(from: &buf), 
            details: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ZenError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .Zero:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidArgument:
            writeInt(&buf, Int32(2))
        
        
        case .StringNullError:
            writeInt(&buf, Int32(3))
        
        
        case .StringUtf8Error:
            writeInt(&buf, Int32(4))
        
        
        case .JsonSerializationFailed:
            writeInt(&buf, Int32(5))
        
        
        case .JsonDeserializationFailed:
            writeInt(&buf, Int32(6))
        
        
        case .ExecutionTaskSpawnError:
            writeInt(&buf, Int32(7))
        
        
        case let .IsolateError(v1):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .EvaluationError(v1):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .ValidationError(v1):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .LoaderKeyNotFound(key):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(key, into: &buf)
            
        
        case let .LoaderInternalError(key,details):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(details, into: &buf)
            
        
        case let .TemplateEngineError(template,details):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(template, into: &buf)
            FfiConverterString.write(details, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenError_lift(_ buf: RustBuffer) throws -> ZenError {
    return try FfiConverterTypeZenError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeZenError_lower(_ value: ZenError) -> RustBuffer {
    return FfiConverterTypeZenError.lower(value)
}


extension ZenError: Equatable, Hashable {}




extension ZenError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}







public protocol ZenCustomNodeCallback: AnyObject, Sendable {
    
    func handle(key: ZenEngineHandlerRequest) async throws  -> ZenEngineHandlerResponse
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceZenCustomNodeCallback {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceZenCustomNodeCallback] = [UniffiVTableCallbackInterfaceZenCustomNodeCallback(
        handle: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> ZenEngineHandlerResponse in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceZenCustomNodeCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.handle(
                     key: try FfiConverterTypeZenEngineHandlerRequest_lift(key)
                )
            }

            let uniffiHandleSuccess = { (returnValue: ZenEngineHandlerResponse) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterTypeZenEngineHandlerResponse_lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeZenError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceZenCustomNodeCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ZenCustomNodeCallback: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitZenCustomNodeCallback() {
    uniffi_zen_uniffi_fn_init_callback_vtable_zencustomnodecallback(UniffiCallbackInterfaceZenCustomNodeCallback.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceZenCustomNodeCallback {
    fileprivate static let handleMap = UniffiHandleMap<ZenCustomNodeCallback>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceZenCustomNodeCallback : FfiConverter {
    typealias SwiftType = ZenCustomNodeCallback
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceZenCustomNodeCallback_lift(_ handle: UInt64) throws -> ZenCustomNodeCallback {
    return try FfiConverterCallbackInterfaceZenCustomNodeCallback.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceZenCustomNodeCallback_lower(_ v: ZenCustomNodeCallback) -> UInt64 {
    return FfiConverterCallbackInterfaceZenCustomNodeCallback.lower(v)
}




public protocol ZenDecisionLoaderCallback: AnyObject, Sendable {
    
    func load(key: String) async throws  -> JsonBuffer?
    
}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceZenDecisionLoaderCallback {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceZenDecisionLoaderCallback] = [UniffiVTableCallbackInterfaceZenDecisionLoaderCallback(
        load: { (
            uniffiHandle: UInt64,
            key: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> JsonBuffer? in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceZenDecisionLoaderCallback.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.load(
                     key: try FfiConverterString.lift(key)
                )
            }

            let uniffiHandleSuccess = { (returnValue: JsonBuffer?) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterOptionTypeJsonBuffer.lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeZenError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterCallbackInterfaceZenDecisionLoaderCallback.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ZenDecisionLoaderCallback: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitZenDecisionLoaderCallback() {
    uniffi_zen_uniffi_fn_init_callback_vtable_zendecisionloadercallback(UniffiCallbackInterfaceZenDecisionLoaderCallback.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterCallbackInterfaceZenDecisionLoaderCallback {
    fileprivate static let handleMap = UniffiHandleMap<ZenDecisionLoaderCallback>()
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceZenDecisionLoaderCallback : FfiConverter {
    typealias SwiftType = ZenDecisionLoaderCallback
    typealias FfiType = UInt64

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceZenDecisionLoaderCallback_lift(_ handle: UInt64) throws -> ZenDecisionLoaderCallback {
    return try FfiConverterCallbackInterfaceZenDecisionLoaderCallback.lift(handle)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterCallbackInterfaceZenDecisionLoaderCallback_lower(_ v: ZenDecisionLoaderCallback) -> UInt64 {
    return FfiConverterCallbackInterfaceZenDecisionLoaderCallback.lower(v)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeZenEvaluateOptions: FfiConverterRustBuffer {
    typealias SwiftType = ZenEvaluateOptions?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeZenEvaluateOptions.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeZenEvaluateOptions.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionCallbackInterfaceZenCustomNodeCallback: FfiConverterRustBuffer {
    typealias SwiftType = ZenCustomNodeCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceZenCustomNodeCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceZenCustomNodeCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionCallbackInterfaceZenDecisionLoaderCallback: FfiConverterRustBuffer {
    typealias SwiftType = ZenDecisionLoaderCallback?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceZenDecisionLoaderCallback.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceZenDecisionLoaderCallback.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDictionaryStringTypeZenEngineTrace: FfiConverterRustBuffer {
    typealias SwiftType = [String: ZenEngineTrace]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDictionaryStringTypeZenEngineTrace.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDictionaryStringTypeZenEngineTrace.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeJsonBuffer: FfiConverterRustBuffer {
    typealias SwiftType = JsonBuffer?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeJsonBuffer.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeJsonBuffer.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeZenEngineTrace: FfiConverterRustBuffer {
    public static func write(_ value: [String: ZenEngineTrace], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeZenEngineTrace.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: ZenEngineTrace] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: ZenEngineTrace]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeZenEngineTrace.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias JsonBuffer = Data

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeJsonBuffer: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> JsonBuffer {
        return try FfiConverterData.read(from: &buf)
    }

    public static func write(_ value: JsonBuffer, into buf: inout [UInt8]) {
        return FfiConverterData.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> JsonBuffer {
        return try FfiConverterData.lift(value)
    }

    public static func lower(_ value: JsonBuffer) -> RustBuffer {
        return FfiConverterData.lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeJsonBuffer_lift(_ value: RustBuffer) throws -> JsonBuffer {
    return try FfiConverterTypeJsonBuffer.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeJsonBuffer_lower(_ value: JsonBuffer) -> RustBuffer {
    return FfiConverterTypeJsonBuffer.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureZenUniffiInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
private func uniffiTraitInterfaceCallAsync<T>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> ()
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)

}

private func uniffiTraitInterfaceCallAsyncWithError<T, E>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> (),
    lowerError: @escaping (E) -> RustBuffer
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch let error as E {
            handleError(CALL_ERROR, lowerError(error))
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)
}

// Borrow the callback handle map implementation to store foreign future handles
// TODO: consolidate the handle-map code (https://github.com/mozilla/uniffi-rs/pull/1823)
fileprivate let UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = UniffiHandleMap<UniffiForeignFutureTask>()

// Protocol for tasks that handle foreign futures.
//
// Defining a protocol allows all tasks to be stored in the same handle map.  This can't be done
// with the task object itself, since has generic parameters.
fileprivate protocol UniffiForeignFutureTask {
    func cancel()
}

extension Task: UniffiForeignFutureTask {}

private func uniffiForeignFutureFree(handle: UInt64) {
    do {
        let task = try UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle: handle)
        // Set the cancellation flag on the task.  If it's still running, the code can check the
        // cancellation flag or call `Task.checkCancellation()`.  If the task has completed, this is
        // a no-op.
        task.cancel()
    } catch {
        print("uniffiForeignFutureFree: handle missing from handlemap")
    }
}

// For testing
public func uniffiForeignFutureHandleCountZenUniffi() -> Int {
    UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.count
}
public func evaluateExpression(expression: String, context: JsonBuffer?)throws  -> JsonBuffer  {
    return try  FfiConverterTypeJsonBuffer_lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_func_evaluate_expression(
        FfiConverterString.lower(expression),
        FfiConverterOptionTypeJsonBuffer.lower(context),$0
    )
})
}
public func evaluateUnaryExpression(expression: String, context: JsonBuffer)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeZenError_lift) {
    uniffi_zen_uniffi_fn_func_evaluate_unary_expression(
        FfiConverterString.lower(expression),
        FfiConverterTypeJsonBuffer_lower(context),$0
    )
})
}
public func overrideConfig(config: ZenConfig)  {try! rustCall() {
    uniffi_zen_uniffi_fn_func_override_config(
        FfiConverterTypeZenConfig_lower(config),$0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_zen_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_zen_uniffi_checksum_func_evaluate_expression() != 46112) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_func_evaluate_unary_expression() != 5920) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_func_override_config() != 10824) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zendecision_evaluate() != 48259) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zendecision_validate() != 18546) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zenengine_create_decision() != 62504) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zenengine_evaluate() != 59161) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zenengine_get_decision() != 30326) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zenexpression_evaluate() != 47446) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zenexpressionunary_evaluate() != 54979) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_constructor_zenengine_new() != 62598) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_constructor_zenexpression_compile() != 36953) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_constructor_zenexpressionunary_compile() != 16181) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zencustomnodecallback_handle() != 54882) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_zen_uniffi_checksum_method_zendecisionloadercallback_load() != 42929) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitZenCustomNodeCallback()
    uniffiCallbackInitZenDecisionLoaderCallback()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureZenUniffiInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all